<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

// Grid dimension
const int N=10;
const int M=10;

// These are the cell states, to understand whether it is occupied or not.
const int EMPTY = 0;
const int ROBOT = 1;
const int POD = 2;
const int POD_AND_ROBOT = 3;

// Status of the pod.
const int POD_FREE = 0;
const int POD_OCCUPIED = 1;

// Max number of processes
const int MAX_T = 10;

// Number of pods
const int PODS_N = N*M - (N/2)*M - (N/2 + N%2)*4;

// This is the grid representing the map.
int grid[N][M];

// Position and status of each pod.
// The second array is necessary to understand the position of the pod and the status (free/occupied).
// The first array is simply a way of giving the id to each pod (necessary to select them during the assignment of a task to a robot)
int pods[PODS_N][3];

// task_queue is global so that the process Robot and the process Task_Queue can synchronize on it.
int current_length_queue = 0;
int task_queue[MAX_T];


// CHANNELS OF THE MODEL

// Array of channels, where the id of the array corresponds to the pod_id, chosen unambigously during the intialization of the map.
chan pods_channel[PODS_N];

// Channels which synchronize when the human takes the item and the robot gives the item.
chan take_item;
chan release_item;

chan pod_position_saved;






const int entryPoint[2] = {N-1,M-1};
const int deliveryPoint[2] = {0,M-1};

//We want to be sure to initialize everything to zero
void initialize_grid() {
    int i,j;

    for (i=0; i&lt;N; i++) {
        for (j=0; j&lt;M; j++) {
            grid[i][j] = 0;
        }
    }
}

void place_pods() {
    int i,j;

    int pod_id = 0;
    
    for (i=0; i&lt;N; i+=2) {
        for (j=0; j&lt;M-4; j++) {
            grid[i][j] = POD;
            pods[pod_id][0] = i;
            pods[pod_id][1] = j;
            pods[pod_id][2] = POD_FREE;
            pod_id++;
        }
    }
}</declaration>
	<template>
		<name>Task_Queue</name>
		<parameter>int T</parameter>
		<declaration>clock t;

// Add a task w.r.t. the id pod RELATIVE to the number of free pods.
// It means that the id pod is the n-th available pod in the array `pods`.
void add_task(int id_pod_relative) {

    int count_id_rel = 0;

    bool pod_found = false;
    int id_pod=0;
    while (id_pod&lt;PODS_N &amp;&amp; !pod_found) {

        if (pods[id_pod][2] = POD_FREE) {

            if (count_id_rel == id_pod_relative)
                pod_found = true;

            count_id_rel++;
        }

        id_pod++;
    }
    id_pod--;    // put here because in the while it counts once more the necessary

    
    task_queue[current_length_queue] = id_pod;
    current_length_queue++;

    pods[id_pod][2] = POD_OCCUPIED;
}

void remove_task() {
    int i;

    for (i=1; i&lt;current_length_queue; i++) {
        task_queue[i-1] = task_queue[i];
    }

    task_queue[current_length_queue - 1] = -1;
    current_length_queue--;
}

void initialize_task_queue() {
    int i;

    for (i=0; i&lt;MAX_T; i++) {
        task_queue[i] = -1;
    }
}

bool pod_available(int id_pod) {
    return pods[id_pod][2] == POD_FREE;
}



// It returns the number of pods available in this instant.
// It is used in the select of a random pod.
int free_pods_number() {
    int number = 0;

    int pod_id;

    for (pod_id = 0; pod_id&lt;N; pod_id++) {
        if (pods[pod_id][2] == POD_FREE) {
            number++;
        }
    }

    return number;
}</declaration>
		<location id="id0" x="-1122" y="-468">
			<name x="-1139" y="-502">start</name>
		</location>
		<location id="id1" x="-799" y="-468">
			<name x="-858" y="-501">task_generation</name>
			<label kind="invariant" x="-850" y="-459">t&lt;=T</label>
		</location>
		<location id="id2" x="-688" y="-229">
			<name x="-680" y="-263">Error_maxSizeReached</name>
		</location>
		<location id="id3" x="-391" y="-382">
			<name x="-425" y="-416">task_sent</name>
			<label kind="invariant" x="-408" y="-365">t &lt; T</label>
		</location>
		<location id="id4" x="-85" y="-467">
			<name x="-136" y="-501">task_removed</name>
			<label kind="invariant" x="-102" y="-442">t &lt; T</label>
		</location>
		<location id="id5" x="-1037" y="-238">
			<name x="-1096" y="-221">Err_podsUnavailable</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="guard" x="-1232" y="-323">current_length_queue&lt;MAX_T
&amp;&amp; t==T &amp;&amp; free_pods_number()==0</label>
			<nail x="-858" y="-348"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-442" y="-544">t &lt; T</label>
			<nail x="-425" y="-518"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-688" y="-365">current_length_queue&gt;0 &amp;&amp; t&lt;T</label>
			<label kind="synchronisation" x="-680" y="-391">pods_channel[task_queue[0]]?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-246" y="-365">t &lt; T</label>
			<label kind="synchronisation" x="-306" y="-399">pod_position_saved?</label>
			<label kind="assignment" x="-280" y="-382">remove_task()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select" x="-918" y="-680">id_pod_relative : int[0 , PODS_N]</label>
			<label kind="guard" x="-918" y="-654">current_length_queue&lt;MAX_T
&amp;&amp; t==T &amp;&amp; free_pods_number() &gt; 0</label>
			<label kind="assignment" x="-943" y="-612">add_task(id_pod_relative%free_pods_number()),
t = 0</label>
			<nail x="-885" y="-562"/>
			<nail x="-732" y="-562"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-824" y="-306">current_length_queue&gt;=MAX_T 
&amp;&amp; t==T</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-1003" y="-459">t = 0,
initialize_grid(),
place_pods(),
initialize_task_queue()</label>
		</transition>
	</template>
	<template>
		<name>Robot</name>
		<parameter>int K</parameter>
		<declaration>clock t;

// Current robot position
int robot_position[2] = {entryPoint[0], entryPoint[1]};

// Current task's pod position
int pod_position[2];</declaration>
		<location id="id6" x="-2108" y="-1963">
			<name x="-2118" y="-1997">Idle</name>
		</location>
		<location id="id7" x="-1675" y="-1963">
			<name x="-1768" y="-1997">Pod_position_saved</name>
		</location>
		<location id="id8" x="-1147" y="-1904">
			<name x="-1181" y="-1938">Pick_pod</name>
		</location>
		<location id="id9" x="-790" y="-1904">
			<name x="-833" y="-1938">Go_to_delivery</name>
		</location>
		<location id="id10" x="-790" y="-1657">
			<name x="-756" y="-1657">Release_item</name>
		</location>
		<location id="id11" x="-1139" y="-1657">
			<name x="-1181" y="-1632">Wait_human</name>
		</location>
		<location id="id12" x="-1428" y="-1657">
			<name x="-1487" y="-1708">Go_back_to_pod</name>
		</location>
		<location id="id13" x="-1725" y="-1657">
			<name x="-1759" y="-1632">Release_pod</name>
		</location>
		<location id="id14" x="-1972" y="-1657">
			<name x="-2014" y="-1640">Go_to_start</name>
		</location>
		<location id="id15" x="-1411" y="-2031">
			<name x="-1421" y="-2065">Go_to_pod</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id15"/>
			<target ref="id8"/>
			<label kind="guard" x="-1317" y="-2014">if next == pod</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-1606" y="-1972">pod_position_saved!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id6"/>
			<label kind="guard" x="-1938" y="-1793">if next_position == starting_point</label>
			<label kind="assignment" x="-1921" y="-1768">update_position</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="-2184" y="-1734">check_neighborood</label>
			<label kind="assignment" x="-2167" y="-1717">update_position</label>
			<nail x="-2031" y="-1751"/>
			<nail x="-2074" y="-1657"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="assignment" x="-1904" y="-1649">update_position</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-1657" y="-1649">if next_position == pod</label>
			<label kind="assignment" x="-1700" y="-1683">update_position, update_pod_status</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="-1479" y="-1547">check_neighborood</label>
			<label kind="assignment" x="-1471" y="-1530">update_position</label>
			<nail x="-1479" y="-1564"/>
			<nail x="-1369" y="-1564"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-1334" y="-1649">release_item?</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1003" y="-1640">take_item!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-654" y="-1887">check_neighborood</label>
			<label kind="assignment" x="-637" y="-1861">update_position</label>
			<nail x="-671" y="-1904"/>
			<nail x="-671" y="-1810"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-782" y="-1785">if next_position == delivery</label>
			<label kind="assignment" x="-773" y="-1759">update_position</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="assignment" x="-1028" y="-1895">update_position</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-2023" y="-1989">pods_channel[task_queue[0]]!</label>
			<label kind="assignment" x="-2040" y="-1946">pod_position[0] = pods[task_queue[0]][0],
pod_position[1] = pods[task_queue[0]][1],
t = 0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Human</name>
		<parameter>int H</parameter>
		<declaration>// Place local declarations here.
clock t;</declaration>
		<location id="id16" x="-850" y="-314">
			<name x="-860" y="-348">idle</name>
		</location>
		<location id="id17" x="-518" y="-314">
			<name x="-561" y="-357">pick_up_item</name>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-705" y="-408">t==H</label>
			<label kind="synchronisation" x="-731" y="-391">release_item!</label>
			<nail x="-688" y="-374"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-722" y="-229">take_item?</label>
			<label kind="assignment" x="-697" y="-212">t=0</label>
			<nail x="-688" y="-238"/>
		</transition>
	</template>
	<system>const int T = 5;
const int H = 1;
const int K = 2;

// Place template instantiations here.
human = Human(H);
task_queue_process = Task_Queue(T);
robot = Robot(K);

// List one or more processes to be composed into a system.
system human, task_queue_process, robot;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
