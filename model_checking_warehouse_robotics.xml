<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

// Grid dimension
const int N=10;
const int M=10;

// These are the cell states, to understand whether it is occupied or not.
const int EMPTY = 0;
const int ROBOT = 1;
const int POD = 2;
const int POD_AND_ROBOT = 3;

// Status of the pod.
const int POD_FREE = 0;
const int POD_OCCUPIED = 1;

// Max number of processes
const int MAX_T = 10;

// Number of pods
const int PODS_N = N*M - (N/2)*M - (N/2 + N%2)*4;

// This is the grid representing the map.
int grid[N][M];

// Position and status of each pod.
// The second array is necessary to understand the position of the pod and the status (free/occupied).
// The first array is simply a way of giving the id to each pod (necessary to select them during the assignment of a task to a robot)
int pods[PODS_N][3];

int current_length_queue = 0;
int task_queue[MAX_T];

chan pods_channel[PODS_N];
chan take_pod;
chan release_pod;






const int entryPoint[2] = {N-1,M-1};
const int deliveryPoint[2] = {0,M-1};

//We want to be sure to initialize everything to zero
void initialize_grid() {
    int i,j;

    for (i=0; i&lt;N; i++) {
        for (j=0; j&lt;M; j++) {
            grid[i][j] = 0;
        }
    }
}

void place_pods() {
    int i,j;

    int pod_id = 0;
    
    for (i=0; i&lt;N; i+=2) {
        for (j=0; j&lt;M-4; j++) {
            grid[i][j] = POD;
            pods[pod_id][0] = i;
            pods[pod_id][1] = j;
            pods[pod_id][2] = POD_FREE;
            pod_id++;
        }
    }
}</declaration>
	<template>
		<name>Task_Queue</name>
		<parameter>int T</parameter>
		<declaration>clock t;

void add_task(int id_pod) {
    task_queue[current_length_queue] = id_pod;
    current_length_queue++;
}

void remove_task() {
    int i;

    for (i=1; i&lt;current_length_queue; i++) {
        task_queue[i-1] = task_queue[i];
    }

    task_queue[current_length_queue - 1] = -1;
    current_length_queue--;
}

void initialize_task_queue() {
    int i;

    for (i=0; i&lt;MAX_T; i++) {
        task_queue[i] = -1;
    }
}</declaration>
		<location id="id0" x="-1079" y="-340">
			<name x="-1096" y="-374">start</name>
		</location>
		<location id="id1" x="-756" y="-340">
		</location>
		<location id="id2" x="-399" y="-340">
		</location>
		<location id="id3" x="-442" y="-25">
			<name x="-452" y="-59">Error_maxSizeReached</name>
		</location>
		<location id="id4" x="-59" y="-476">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-365" y="-459">pods_channel[task_queue[0]]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-748" y="-68">current_length_queue&gt;=MAX_T  &amp;&amp; t==T</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<nail x="-586" y="-442"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-697" y="-365">current_length_queue&lt;MAX_T &amp;&amp; t==T</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-960" y="-331">t = 0,
initialize_grid(),
place_pods(),
initialize_task_queue()</label>
		</transition>
	</template>
	<template>
		<name>Task</name>
		<declaration>int position_pod;    // in teoria è il numero associato al pod e quindi alla POSIZIONE del pod, per come l'abbiamo pensata fin'ora</declaration>
		<location id="id5" x="-501" y="-212">
		</location>
		<init ref="id5"/>
	</template>
	<template>
		<name>Robot</name>
		<declaration>int position_pod;    // in teoria è il numero associato al pod e quindi alla POSIZIONE del pod, per come l'abbiamo pensata fin'ora</declaration>
		<location id="id6" x="-1037" y="-433">
		</location>
		<location id="id7" x="-714" y="-416">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-977" y="-459">pods_channel[task_queue[0]]?</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Human</name>
		<parameter>int H</parameter>
		<declaration>// Place local declarations here.
clock t;</declaration>
		<location id="id8" x="-850" y="-314">
			<name x="-860" y="-348">idle</name>
		</location>
		<location id="id9" x="-518" y="-314">
			<name x="-561" y="-357">pick_up_item</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-705" y="-408">t==H</label>
			<label kind="synchronisation" x="-731" y="-391">release_pod!</label>
			<nail x="-688" y="-374"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-722" y="-229">take_pod?</label>
			<label kind="assignment" x="-697" y="-212">t=0</label>
			<nail x="-688" y="-238"/>
		</transition>
	</template>
	<system>const int T = 5;
const int H = 1;

// Place template instantiations here.
human = Human(H);
task_queue_process = Task_Queue(T);

// List one or more processes to be composed into a system.
system human, task_queue_process;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
